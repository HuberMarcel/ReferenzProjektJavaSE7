package de.marcelhuber.referenzprojektjavase7.view;
// TODO: Die ganzen abstrakten Methoden sind zu implementieren
//       Weiterhin: Die Abfrage mit dem Geburtstag bzw. der Test, ob alle Felder
//       sinnvoll gefüllt sind, funktioniert noch nicht korrekt

import de.marcelhuber.referenzprojektjavase7.controller.GrundschulVerwaltungController;
import de.marcelhuber.referenzprojektjavase7.dao.MySQLMenschRealDatenDao;
import de.marcelhuber.referenzprojektjavase7.daointerface.InterfaceMenschRealDatenDao;
import de.marcelhuber.referenzprojektjavase7.datensatzklasse.MenschDatenKonkret;
import de.marcelhuber.systemtools.Marker;
import java.awt.Color;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Marcel Huber; letzte Änderung: 09.08.2017
 */
public class GrundschulVerwaltungGUI04 extends javax.swing.JFrame implements GrundschulVerwaltungView {

    private MenschTableModel menschTableModel;
    private int selectedRowIndex;
    private LoginDialog loginDialog;
    private boolean showjScrollPaneTableMenschDaten;
    private boolean showjPanelDirektor;
    private boolean showjPanelMenschDatenVerwaltung;
    private MenschDatenKonkret mdk;
    private String geburtsname;
    private String familienname;
    private String vorname;
    private String zweitname;
    private String geburtsdatum;
    private String heutigesDatum;
    private Byte textfeldNummer;
    private Date date;
    private DateFormat df;
    private String[] aDaysInformationsAsStrings;
    private int[] todaysInformations;
    private int[] birthdayInformations;
    private Integer alter;
//    private int minimalAlter;
//    private int maximalAlter;
    private List<JTextField> alljTextFields;

//    {
//        minimalAlter = 0;
//        maximalAlter = 79;
//    }
    /**
     * Creates new form GrundschulVerwaltungGUI01
     */
    public GrundschulVerwaltungGUI04() {
        menschTableModel = new MenschTableModel();
        initComponents();
//      der button für die Connection dient nur zum Debuggen  
        jButtonCheckConnection.setVisible(false);
        alljTextFields = new ArrayList<>();
        alljTextFields = new ArrayList<>();
        addEveryjTextField();
        setShowjScrollPaneTableMenschDaten(false);
        setShowjPanelDirektor(false);
        setShowjPanelMenschDatenVerwaltung(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogGeburtstagUnsinnig = new javax.swing.JDialog();
        jScrollPaneTableMenschDaten = new javax.swing.JScrollPane();
        jTableMenschDaten = new javax.swing.JTable();
        jPanelMenschDatenVerwaltung = new javax.swing.JPanel();
        jTextGeburtsname = new javax.swing.JTextField();
        jLabelGeburtsname = new javax.swing.JLabel();
        jLabelFamilienname = new javax.swing.JLabel();
        jTextFamilienname = new javax.swing.JTextField();
        jLabelVorname = new javax.swing.JLabel();
        jTextVorname = new javax.swing.JTextField();
        jLabelZweitname = new javax.swing.JLabel();
        jTextZweitname = new javax.swing.JTextField();
        jLabelGeburtsdatum = new javax.swing.JLabel();
        jFormattedTextMenschGeburtsdatum = new javax.swing.JFormattedTextField();
        jPanelDirektor = new javax.swing.JPanel();
        jScrollPanelDirektor = new javax.swing.JScrollPane();
        jListUnterrichtsfaecher = new javax.swing.JList();
        jCheckBoxUnterrichtsfaecher = new javax.swing.JCheckBox();
        jButtonCreatePerson = new javax.swing.JButton();
        jButtonDeletePersonFromTable = new javax.swing.JButton();
        jButtonCheckConnection = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuUserLogin = new javax.swing.JMenu();
        jMenuItemLogin = new javax.swing.JMenuItem();
        jMenuOptionales = new javax.swing.JMenu();
        jMenuItemStundenplaene = new javax.swing.JMenuItem();
        jMenuItemRaumbelegung = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialogGeburtstagUnsinnigLayout = new javax.swing.GroupLayout(jDialogGeburtstagUnsinnig.getContentPane());
        jDialogGeburtstagUnsinnig.getContentPane().setLayout(jDialogGeburtstagUnsinnigLayout);
        jDialogGeburtstagUnsinnigLayout.setHorizontalGroup(
            jDialogGeburtstagUnsinnigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialogGeburtstagUnsinnigLayout.setVerticalGroup(
            jDialogGeburtstagUnsinnigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grundschulverwaltungs-Software");

        jTableMenschDaten.setModel(menschTableModel);
        jTableMenschDaten.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableMenschDatenFocusGained(evt);
            }
        });
        jScrollPaneTableMenschDaten.setViewportView(jTableMenschDaten);

        jTextGeburtsname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jTextGeburtsname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextGeburtsnameFocusGained(evt);
            }
        });
        jTextGeburtsname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextGeburtsnameActionPerformed(evt);
            }
        });

        jLabelGeburtsname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jLabelGeburtsname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGeburtsname.setText("Geburtsname*");

        jLabelFamilienname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jLabelFamilienname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelFamilienname.setText("Familienname*");

        jTextFamilienname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jTextFamilienname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFamiliennameFocusGained(evt);
            }
        });

        jLabelVorname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jLabelVorname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelVorname.setText("Vorname*");

        jTextVorname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jTextVorname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextVornameFocusGained(evt);
            }
        });
        jTextVorname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextVornameActionPerformed(evt);
            }
        });

        jLabelZweitname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jLabelZweitname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelZweitname.setText("Zweitname");

        jTextZweitname.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jTextZweitname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextZweitnameFocusGained(evt);
            }
        });

        jLabelGeburtsdatum.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jLabelGeburtsdatum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGeburtsdatum.setText("Geburtsdatum*");

        jFormattedTextMenschGeburtsdatum.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM))));
        jFormattedTextMenschGeburtsdatum.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jFormattedTextMenschGeburtsdatum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFormattedTextMenschGeburtsdatumFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenschDatenVerwaltungLayout = new javax.swing.GroupLayout(jPanelMenschDatenVerwaltung);
        jPanelMenschDatenVerwaltung.setLayout(jPanelMenschDatenVerwaltungLayout);
        jPanelMenschDatenVerwaltungLayout.setHorizontalGroup(
            jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenschDatenVerwaltungLayout.createSequentialGroup()
                .addGroup(jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelFamilienname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelVorname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelZweitname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelGeburtsname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelGeburtsdatum, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jFormattedTextMenschGeburtsdatum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                    .addComponent(jTextZweitname, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextVorname, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFamilienname, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextGeburtsname, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanelMenschDatenVerwaltungLayout.setVerticalGroup(
            jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenschDatenVerwaltungLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGeburtsname)
                    .addComponent(jTextGeburtsname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFamilienname)
                    .addComponent(jTextFamilienname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelVorname)
                    .addComponent(jTextVorname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelZweitname)
                    .addComponent(jTextZweitname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMenschDatenVerwaltungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGeburtsdatum)
                    .addComponent(jFormattedTextMenschGeburtsdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(283, 283, 283))
        );

        jListUnterrichtsfaecher.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jListUnterrichtsfaecher.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Fach 01", "Fach 02", "Fach 03" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPanelDirektor.setViewportView(jListUnterrichtsfaecher);

        jCheckBoxUnterrichtsfaecher.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jCheckBoxUnterrichtsfaecher.setText("Unterrichtsfächer");
        jCheckBoxUnterrichtsfaecher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUnterrichtsfaecherActionPerformed(evt);
            }
        });

        jButtonCreatePerson.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jButtonCreatePerson.setText("Neue Person anlegen");
        jButtonCreatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePersonActionPerformed(evt);
            }
        });

        jButtonDeletePersonFromTable.setFont(new java.awt.Font("Vani", 0, 16)); // NOI18N
        jButtonDeletePersonFromTable.setText("Ausgewählte Person löschen");
        jButtonDeletePersonFromTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePersonFromTableActionPerformed(evt);
            }
        });

        jButtonCheckConnection.setText("CheckConnection");
        jButtonCheckConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckConnectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDirektorLayout = new javax.swing.GroupLayout(jPanelDirektor);
        jPanelDirektor.setLayout(jPanelDirektorLayout);
        jPanelDirektorLayout.setHorizontalGroup(
            jPanelDirektorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDirektorLayout.createSequentialGroup()
                .addGroup(jPanelDirektorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxUnterrichtsfaecher, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelDirektorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonCheckConnection)))
                .addGap(18, 18, 18)
                .addGroup(jPanelDirektorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDirektorLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonDeletePersonFromTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCreatePerson))
                    .addComponent(jScrollPanelDirektor, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelDirektorLayout.setVerticalGroup(
            jPanelDirektorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDirektorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelDirektorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxUnterrichtsfaecher)
                    .addComponent(jScrollPanelDirektor, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDirektorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCreatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelDirektorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonDeletePersonFromTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCheckConnection))))
        );

        jMenuUserLogin.setText("User-Login");

        jMenuItemLogin.setText("Login");
        jMenuItemLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoginActionPerformed(evt);
            }
        });
        jMenuUserLogin.add(jMenuItemLogin);

        jMenuBar1.add(jMenuUserLogin);

        jMenuOptionales.setText("Optionales");

        jMenuItemStundenplaene.setText("Stundenpläne");
        jMenuOptionales.add(jMenuItemStundenplaene);

        jMenuItemRaumbelegung.setText("Raumbelegung");
        jMenuOptionales.add(jMenuItemRaumbelegung);

        jMenuBar1.add(jMenuOptionales);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTableMenschDaten, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelMenschDatenVerwaltung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelDirektor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPaneTableMenschDaten, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 524, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(206, 206, 206)
                    .addComponent(jPanelMenschDatenVerwaltung, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(247, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(473, Short.MAX_VALUE)
                    .addComponent(jPanelDirektor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(100, 100, 100)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoginActionPerformed
        int counterOfLoginTriesWithThisLoginDialog = 0;
        int maxNumberOfLoginTries = 2;
        // nach  maxNumberOfLoginTries  Fehlschlägen kein erneuter Login-Versuch 
        // durch automatisches Anzeigen des hiesigen Login-Dialogs
        // --> Login-Button muss dann erneut gedrückt werden
        // Hinweis:  maxNumberOfLoginTries >= 1
        EnumUserRole userRole;
        if (loginDialog == null) {
            loginDialog = new LoginDialog(this);
        }

        while (counterOfLoginTriesWithThisLoginDialog < maxNumberOfLoginTries) {
            counterOfLoginTriesWithThisLoginDialog++;
            resetUserRoleView();
            loginDialog.showDialog();
            userRole = loginDialog.getUserRole();
            switch (userRole) {
                case DIREKTOR:
                    setUserRoleDirektor();
                    counterOfLoginTriesWithThisLoginDialog = maxNumberOfLoginTries;
                    break;
                case KONTAKTPERSON:
                    setUserRoleKontaktperson();
                    counterOfLoginTriesWithThisLoginDialog = maxNumberOfLoginTries;
                    break;
                case EXTERN:
                    setUserRoleExtern();
                    counterOfLoginTriesWithThisLoginDialog = maxNumberOfLoginTries;
                    System.exit(0);
                    break;
                case NONE:
                    showInformation("Falsche/unbekannte Nutzereingaben!", "error");
                    break;
                case BREAK:
                    counterOfLoginTriesWithThisLoginDialog = maxNumberOfLoginTries;
                    break;
                default:
                    throw new AssertionError();
            }
        }

//        if (loginDialog.isLoginOK()) {
//            setShowjPanelMenschDatenVerwaltung(true);
//            jTextGeburtsname.requestFocus();
//            setShowjPanelDirektor(true);
//            setAlljTextFieldsEnabled();
//        } else {
//            setShowjPanelMenschDatenVerwaltung(true);
//            jTextGeburtsname.requestFocus();
//            setAlljTextFieldsDisabled();
//            setShowjPanelDirektor(false);
//        }
    }//GEN-LAST:event_jMenuItemLoginActionPerformed

    private void jTextGeburtsnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextGeburtsnameFocusGained
        jTextGeburtsname.selectAll();
    }//GEN-LAST:event_jTextGeburtsnameFocusGained

    private void jTextGeburtsnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextGeburtsnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextGeburtsnameActionPerformed

    private void jTextFamiliennameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFamiliennameFocusGained
        jTextFamilienname.selectAll();
    }//GEN-LAST:event_jTextFamiliennameFocusGained

    private void jTextVornameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextVornameFocusGained
        jTextVorname.selectAll();
    }//GEN-LAST:event_jTextVornameFocusGained

    private void jTextVornameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextVornameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextVornameActionPerformed

    private void jTextZweitnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextZweitnameFocusGained
        jTextZweitname.selectAll();
    }//GEN-LAST:event_jTextZweitnameFocusGained

    private void jFormattedTextMenschGeburtsdatumFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextMenschGeburtsdatumFocusGained
        jFormattedTextMenschGeburtsdatum.selectAll();
        jFormattedTextMenschGeburtsdatum.setForeground(Color.BLACK);
    }//GEN-LAST:event_jFormattedTextMenschGeburtsdatumFocusGained

    // eigentlich sollte die GUI nur kontrollieren, ob die Einträge OK
    // anderer Methodenname
    // besser: diese Aufgabe dem Controller übergeben, eigentlich darf die 
    //         GUI keine Geschätslogik enthalten
    private boolean kontrolliereDieTextfelderDerGui() {
//        System.out.println("Alter in createMenschDatenKonkret(): " + alter);
        checkTheInformations((byte) 1);
        // die obige Funktion kann sorgt immer dafür, dass, falls Felder geändert
        // wurden, der neue Eintrag in die MenschDatenKonkret übernommen wird
        // ihr eigentlicher ursprünglicher Sinn war es, leere Felder zu 
        // lokalisieren und zu markieren
        boolean everyNecessaryTextFieldIsFilled = true;
        if (checkStringAndRequestFocusIfNecessary(jTextGeburtsname).length() == 0) {
            everyNecessaryTextFieldIsFilled = false;
            checkTheInformations((byte) 1);
        }
        if (checkStringAndRequestFocusIfNecessary(jTextFamilienname).length() == 0) {
            everyNecessaryTextFieldIsFilled = false;
            checkTheInformations((byte) 2);
        }
        if (checkStringAndRequestFocusIfNecessary(jTextVorname).length() == 0) {
            everyNecessaryTextFieldIsFilled = false;
            checkTheInformations((byte) 3);
        }
        // das Feld Zweitname ist nur optional, daher hier auskommentiert
//        if (checkStringAndRequestFocusIfNecessary(jTextZweitname).length() == 0) {
//            everyNecessaryTextFieldIsFilled = false;
//            checkTheInformations((byte) 4);
//        }
        if (checkStringAndRequestFocusIfNecessary(jFormattedTextMenschGeburtsdatum).length() == 0) {
            everyNecessaryTextFieldIsFilled = false;
            checkTheInformations((byte) 5);
        }
//        Marker.marker();
        if (everyNecessaryTextFieldIsFilled) {
//            System.out.println(birthdayIsChecked());
//            if (birthdayIsChecked()) {
            // kein Objekt erzeugen, sondern Controller informieren
            // Controller holt die Daten ab, und erzeugt das entsprechende DAO
            // der Rest wird vom DAO erledigt
//                alter Code
            mdk = new MenschDatenKonkret.Builder()
                    .geburtsname(geburtsname)
                    .familienname(familienname)
                    .vorname(vorname)
                    .zweitname(zweitname)
                    //                        .geburtsDatum(geburtsdatum) // String in Calendar-Objekt konvertieren
                    .build();
//                System.out.println("Menschdaten (in GUI02): " + mdk);
            System.out.println("GUI02 - Geburtsdatum: " + geburtsdatum);
            if (gsVController.checkTheBirthdayInformations()) {
                return true;
            } else {
                showInformation("Unsinniges Geburtsdatum, "
                        + "die Person soll " + gsVController.getAlterFromModell() + " "
                        + "Jahre alt sein?", "error");
                jFormattedTextMenschGeburtsdatum.requestFocus();
                return false;
            }
        } else {
            // die folgende erste Codezeile dient nur zur Sicherheit, falls 
            // jemand in der Zwischenzeit doch per Hand jemand ein Textfeld 
            // geändert/geleert hat
            checkTheInformations((byte) 1);
            return false;
        }
    }

    private void jCheckBoxUnterrichtsfaecherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUnterrichtsfaecherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxUnterrichtsfaecherActionPerformed

    private void jButtonCreatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePersonActionPerformed
        //        System.out.println("textfeldNummer in jButtonCreatePersonActionPerformed: "
        //                + textfeldNummer);
        if (textfeldNummer == null) {
            textfeldNummer = 1;
        }
        if (textfeldNummer != 0) {
            // vielleicht noch Dialogfenster, dass Daten einzutragen sind,
            // ergänzen
            textfeldNummer = checkTheInformations(textfeldNummer);
            if (textfeldNummer == 0 && kontrolliereDieTextfelderDerGui()) {
                gsVController.checkMenschDatenKonkretAndTryToSave();
                //                System.out.println("Zweitname 1:" + zweitname);
                menschTableModel.updateModel();
            }
        } else {
            if (kontrolliereDieTextfelderDerGui()) {
                gsVController.checkMenschDatenKonkretAndTryToSave();
                //                System.out.println("Zweitname 2:" + zweitname);
            }
        }
    }//GEN-LAST:event_jButtonCreatePersonActionPerformed

    private void jButtonDeletePersonFromTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePersonFromTableActionPerformed
        selectedRowIndex = jTableMenschDaten.getSelectedRow();
//        System.out.println("(GUI04) selectedRowIndex: " + selectedRowIndex);
        if (selectedRowIndex != -1) {
            menschTableModel.mdkToModifyOrDelete = menschTableModel.getMenschDatenKonkret(selectedRowIndex);
            menschTableModel.deleteChoosenPerson();
        }
        menschTableModel.updateModel();
    }//GEN-LAST:event_jButtonDeletePersonFromTableActionPerformed

    private void jTableMenschDatenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableMenschDatenFocusGained
        selectedRowIndex = jTableMenschDaten.getSelectedRow();
    }//GEN-LAST:event_jTableMenschDatenFocusGained

    private void jButtonCheckConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckConnectionActionPerformed
        gsVController.checkAndIfNecessaryResetConnection();
    }//GEN-LAST:event_jButtonCheckConnectionActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GrundschulVerwaltungGUI01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GrundschulVerwaltungGUI01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GrundschulVerwaltungGUI01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GrundschulVerwaltungGUI01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GrundschulVerwaltungGUI02().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheckConnection;
    private javax.swing.JButton jButtonCreatePerson;
    private javax.swing.JButton jButtonDeletePersonFromTable;
    private javax.swing.JCheckBox jCheckBoxUnterrichtsfaecher;
    private javax.swing.JDialog jDialogGeburtstagUnsinnig;
    private javax.swing.JFormattedTextField jFormattedTextMenschGeburtsdatum;
    private javax.swing.JLabel jLabelFamilienname;
    private javax.swing.JLabel jLabelGeburtsdatum;
    private javax.swing.JLabel jLabelGeburtsname;
    private javax.swing.JLabel jLabelVorname;
    private javax.swing.JLabel jLabelZweitname;
    private javax.swing.JList jListUnterrichtsfaecher;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemLogin;
    private javax.swing.JMenuItem jMenuItemRaumbelegung;
    private javax.swing.JMenuItem jMenuItemStundenplaene;
    private javax.swing.JMenu jMenuOptionales;
    private javax.swing.JMenu jMenuUserLogin;
    private javax.swing.JPanel jPanelDirektor;
    private javax.swing.JPanel jPanelMenschDatenVerwaltung;
    private javax.swing.JScrollPane jScrollPaneTableMenschDaten;
    private javax.swing.JScrollPane jScrollPanelDirektor;
    private javax.swing.JTable jTableMenschDaten;
    private javax.swing.JTextField jTextFamilienname;
    private javax.swing.JTextField jTextGeburtsname;
    private javax.swing.JTextField jTextVorname;
    private javax.swing.JTextField jTextZweitname;
    // End of variables declaration//GEN-END:variables

    private GrundschulVerwaltungController gsVController;

    @Override
    public boolean setGeburtsdatum(Calendar geburtsdatum) {
        boolean geburtsdatumIsAccepted = false;
        // TODO: Genaue Implementierung
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return geburtsdatumIsAccepted;
    }

    @Override
    public void setController(GrundschulVerwaltungController gsVController) {
//        System.out.println("Controller ist gesetzt! --> " + gsVController);
        this.gsVController = gsVController;
    }

    @Override
    public void showView() {
        setVisible(true);
    }

    @Override
    public void reset() {
        menschTableModel.updateModel();
//        jTableMenschDaten.changeSelection(- 1, 0,
//                true, false);
        for (JTextField jTextField : alljTextFields) {
            jTextField.setText("");
        }
        // die folgenden zwei Zeilen wegen eines Bugs im jFormattedTextField
        // anscheinend wird der letzte sinnvolle Text temporär gespeichert
        jFormattedTextMenschGeburtsdatum.setText("01.01.1800");
        jFormattedTextMenschGeburtsdatum.setForeground(Color.RED);
        geburtsdatum = jFormattedTextMenschGeburtsdatum.getText();
        jTextGeburtsname.requestFocus();
    }

    @Override
    public String getGeburtsname() {
        return geburtsname;
    }

    @Override
    public boolean setGeburtsname(String geburtsname) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getFamilienname() {
        return familienname;
    }

    @Override
    public boolean setFamilienname(String familienname) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getVorname() {
        return vorname;
    }

    @Override
    public boolean setVorname(String vorname) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getZweitname() {
        return zweitname;
    }

    @Override
    public boolean setZweitname(String zweitname) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Calendar getGeburtsdatum() {
        Calendar tagDerGeburt = Calendar.getInstance();
        String[] geburtstagsArray = geburtsdatum.split("\\.");
//        System.out.println(Arrays.toString(geburtstagsArray));
        tagDerGeburt.set(Integer.parseInt(geburtstagsArray[2]),
                -1 + Integer.parseInt(geburtstagsArray[1]), // Monate sind 0-basiert
                Integer.parseInt(geburtstagsArray[0]));
        return tagDerGeburt;
    }

    private void setShowjScrollPaneTableMenschDaten(boolean showjScrollPaneTableMenschDaten) {
        this.showjScrollPaneTableMenschDaten = showjScrollPaneTableMenschDaten;
        jScrollPaneTableMenschDaten.setVisible(showjScrollPaneTableMenschDaten);
        // die folgenden Zeilen werden lediglich benötig, um das Frame neu zu zeichen
        // denn aus irgendeinem Grund wird sonst die Tabelle nicht direkt angezeigt 
        // (Bug in Swing oder ein Bug in meinem Code, den ich nicht lokalisieren kann)
        int thisWidth = this.getSize().width;
        int thisHeight = this.getSize().height;
        this.setSize(thisWidth - 1, thisHeight);
        this.setSize(thisWidth, thisHeight);
    }

    private void setShowjPanelDirektor(boolean showjPanelDirektor) {
        this.showjPanelDirektor = showjPanelDirektor;
        jPanelDirektor.setVisible(showjPanelDirektor);
    }

    private void setShowjPanelMenschDatenVerwaltung(boolean showjPanelMenschDatenVerwaltung) {
        this.showjPanelMenschDatenVerwaltung = showjPanelMenschDatenVerwaltung;
        jPanelMenschDatenVerwaltung.setVisible(showjPanelMenschDatenVerwaltung);
    }

    private void setAlljTextFieldsDisabled() {
        for (JTextField jTextField : alljTextFields) {
            jTextField.setEnabled(false);
        }
    }

    private void setAlljTextFieldsEnabled() {
        for (JTextField jTextField : alljTextFields) {
            jTextField.setEnabled(true);
        }
    }

//    private void selectAllForAlljTextFields() {
//        for (JTextField jTextField : alljTextFields) {
//            jTextField.selectAll();
//        }
//    }
    private void addEveryjTextField() {
        alljTextFields.add(jTextFamilienname);
        alljTextFields.add(jTextGeburtsname);
        alljTextFields.add(jTextVorname);
        alljTextFields.add(jTextZweitname);
        alljTextFields.add(jFormattedTextMenschGeburtsdatum);
    }

    private void setUserRoleDirektor() {
        setUserRoleKontaktperson();
        setShowjPanelMenschDatenVerwaltung(true);
        setShowjPanelDirektor(true);
        setAlljTextFieldsEnabled();
    }

    private void setUserRoleKontaktperson() {
        setShowjScrollPaneTableMenschDaten(true);
//        setShowjPanelMenschDatenVerwaltung(false);
//        jTextGeburtsname.requestFocus();
    }

    private void setUserRoleExtern() {
        resetUserRoleView();
        showInformation("Externe User haben keine Berechtigungen!", "error");
    }

    private void resetUserRoleView() {
        setShowjScrollPaneTableMenschDaten(false);
        setShowjPanelDirektor(false);
        setShowjPanelMenschDatenVerwaltung(false);
        setAlljTextFieldsDisabled();
    }

    @Override
    public MenschDatenKonkret getMenschDatenKonkret() {
        return mdk;
    }

    @Override
    public boolean setMenschDatenKonkret(MenschDatenKonkret mdk) {
        // TODO
        return false;
    }

    @Override
    public void showInformation(String hinweis, String hinweisTyp) {
        if (hinweisTyp.toLowerCase().contains("error")) {
            JOptionPane.showMessageDialog(this, hinweis, hinweisTyp.toUpperCase(),
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, hinweis, hinweisTyp.toUpperCase(),
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private byte checkTheInformations(byte b) {
//        Marker.marker();
        switch (b) {
            case 1:
                geburtsname = checkStringAndRequestFocusIfNecessary(jTextGeburtsname);
                if (geburtsname.length() == 0) {
                    return 1;
                }
//                break;
            case 2:
                familienname = checkStringAndRequestFocusIfNecessary(jTextFamilienname);
                if (familienname.length() == 0) {
                    return 2;
                }
//                break;
            case 3:
                vorname = checkStringAndRequestFocusIfNecessary(jTextVorname);
                if (vorname.length() == 0) {
                    return 3;
                }
//                break;
//            case 4:
                zweitname = checkStringAndRequestFocusIfNecessary(jTextZweitname);
//                if (zweitname.length() == 0) {
//                    return 4;
//                }
////                break;
            case 5:
                geburtsdatum = checkStringAndRequestFocusIfNecessary(jFormattedTextMenschGeburtsdatum);
                if (geburtsdatum.length() == 0) {
                    return 5;
                }
            default:
                textfeldNummer = 0;
                return textfeldNummer;
//                throw new AssertionError();
        }
    }

    private String checkStringAndRequestFocusIfNecessary(JTextField textfeld) {
        String eingabeText = textfeld.getText().trim();
        textfeld.setText(eingabeText);
        if (eingabeText.length() == 0) {
            textfeld.requestFocus();
            textfeld.selectAll();
        }
        return eingabeText;
    }

//    class MenschTableModel implements TableModel {
    class MenschTableModel extends AbstractTableModel {

        private MenschDatenKonkret mdkToModifyOrDelete;
        // das TableModel und damit diese View benötigt das DAO 
        // um alle Daten der Tabelle anzuzeigen
        InterfaceMenschRealDatenDao mrdDao;
        private List<MenschDatenKonkret> menschDaten;
        private String[] columns = {
            "id",
            "geburtsname",
            "familienname",
            "vorname",
            "zweitname",
            "geburtsdatum"
        };

        public MenschTableModel() {
//            myMenschDatenDao = gsVController.getMenschRealDatenDao();
            mrdDao = new MySQLMenschRealDatenDao();
            readAllMenschDaten();
        }

        private void readAllMenschDaten() {
            boolean dataFromTableCanBeReaded = ((MySQLMenschRealDatenDao) mrdDao).getConnectionIsValid();
//            System.out.println("Verbindungsprobleme? " + (!dataFromTableCanBeReaded));
//            PressEnter.toContinue();
            if (!dataFromTableCanBeReaded) {
                mrdDao = new MySQLMenschRealDatenDao();
                if (menschDaten == null || menschDaten.size() == 0) {
                    menschDaten = new ArrayList<>();
                }
            } else {
                menschDaten = (List<MenschDatenKonkret>) mrdDao.findAllMenschRealDaten();
            }
        }

        @Override
        public int getRowCount() {
            return menschDaten.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public String getColumnName(int columnIndex) {
//            System.out.println(columns[columnIndex]);
            return columns[columnIndex];
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return Integer.class;
            }
            return Object.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            MenschDatenKonkret mdk = getMenschDatenKonkret(rowIndex);
            switch (columnIndex) {
                case 0:
                    return mdk.getId();
                case 1:
                    return mdk.getGeburtsname();
                case 2:
                    return mdk.getFamilienname();
                case 3:
                    return mdk.getVorname();
                case 4:
                    return mdk.getZweitname();
                case 5:
                    return mdk.getGeburtsDatumAsString();
                default:
                    throw new AssertionError();
            }
        }

        public MenschDatenKonkret getMenschDatenKonkret(int rowIndex) {
            mdkToModifyOrDelete = menschDaten.get(rowIndex);
            return menschDaten.get(rowIndex);
        }

        public void deleteChoosenPerson() {
            if (mdkToModifyOrDelete.getId() != null && mdkToModifyOrDelete.getId() > 0) {
                if (gsVController.tryToDelete(mdkToModifyOrDelete)) {
                    updateModel();
                    return;
                }
                showInformation("Person mit id " + mdkToModifyOrDelete.getId() + " konnte "
                        + "nicht gelöscht werden!", "error");
                updateModel();
                return;
            }
            showInformation("Fehler bei der id: " + mdkToModifyOrDelete.getId(), "error");
            updateModel();
            return;
        }
//        @Override
//        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
//            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        }
//        @Override
//        public void addTableModelListener(TableModelListener l) {
//            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        }

        @Override
        public void removeTableModelListener(TableModelListener l) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        private void updateModel() {
            readAllMenschRealDaten();
            fireTableDataChanged();
            if (menschTableModel.getRowCount() > 0) {
                menschTableModel.getValueAt(0, 0);
                jTableMenschDaten.changeSelection(jTableMenschDaten.getRowCount() - 1, jTableMenschDaten.getRowCount() - 1,
                        true, false);
//                System.out.println("Ausgewählte Zeile: " + jTableMenschDaten.getSelectedRow());
            }
        }

        private void readAllMenschRealDaten() {
            menschDaten
                    = (List<MenschDatenKonkret>) gsVController.findAllMenschRealDaten();
        }
    }
}
